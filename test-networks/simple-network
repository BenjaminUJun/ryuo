#!/usr/bin/env python2
import subprocess
import time
import sys

from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.topo import Topo

from ryuo.mininet.node import TestingHost, RyuoOVSSwitch
from ryuo.tests.utils import add_addresses, request_routing


OFP = 'OpenFlow14'  #


class SwitchOverTimeTestingTopo(Topo):
    """
      1.2       1.1  2.1        2.2  5.1    5.2
    h1-------------s1--------------s2----------h2
                3.1|               |4.1
                   |               |
                3.2|               |
                   s3--------------,
                     4.2
    """

    def __init__(self):
        Topo.__init__(self)
        h1 = self.addHost('h1')
        h2 = self.addHost('h2')

        s = [self.addSwitch('s%d' % (i + 1),
                            controller_dir='.',
                            ryu_args=['ryuo.kf_routing.kf_routing_local',
                                      'ryuo.topology.topology_local'],
                            port=6634 + i,
                            protocols=OFP) for i in range(0, 3)]

        self.addLink(h1, s[0])
        self.addLink(h2, s[1])

        graph = [[0, 1, 1],
                 [1, 0, 1],
                 [1, 1, 0]]

        for i in range(0, 3):
            for j in range(i + 1, 3):
                if graph[i][j] == 1:
                    self.addLink(s[i], s[j])


if __name__ == '__main__':
    for i in range(int(sys.argv[1])):
        ryuo = subprocess.Popen(['ryu-manager', 'ryuo.kf_routing.app'],
                                stdin=subprocess.PIPE)
        try:
            time.sleep(4)
            RyuoOVSSwitch.setup()
            setLogLevel('debug')
            net = Mininet(topo=SwitchOverTimeTestingTopo(),
                          switch=RyuoOVSSwitch,
                          controller=RemoteController,
                          host=TestingHost)
            try:
                net.start()
                time.sleep(10)
                addresses = [['10.0.1.1/24', 1, 1],
                             ['10.0.2.1/24', 1, 2],
                             ['10.0.3.1/24', 1, 3],
                             ['10.0.2.2/24', 2, 2],
                             ['10.0.4.1/24', 2, 3],
                             ['10.0.5.1/24', 2, 1],
                             ['10.0.3.2/24', 3, 1],
                             ['10.0.4.2/24', 3, 2]]
                add_addresses(addresses, '127.0.0.1')
                request_routing('127.0.0.1')
                h1 = net.hosts[0]
                h2 = net.hosts[1]
                h1.setIP('10.0.1.2/24')
                h2.setIP('10.0.5.2/24')
                h1.setDefaultRoute('via 10.0.1.1')
                h2.setDefaultRoute('via 10.0.5.1')

                # ARP handling will cause high packet loss on the first second
                # net.pingAll()

                CLI(net)
            except Exception as e:
                print e
            finally:
                net.stop()
        finally:
            ryuo.kill()
            ryuo.wait()
