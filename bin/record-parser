#!/usr/bin/env python2
import argparse
import copy
from os import listdir
import os
from os.path import isfile
from os.path import join
import json

from matplotlib import pyplot, rc
from matplotlib.pyplot import legend


font = {'family': 'normal',
        'weight': 'normal',
        'size': 22}


class Result(object):
    def __init__(self, total_percentage, control_percentage, num_nodes):
        self.total_percentage = total_percentage
        self.control_percentage = control_percentage
        self.num_nodes = num_nodes

    def __gt__(self, other):
        return self.control_percentage > other.control_percentage or (
            self.control_percentage == other.control_percentage and
            self.total_percentage > other.total_percentage)

    def __str__(self):
        return "{'tp': %f, 'cp': %f}" % (
            self.total_percentage, self.control_percentage)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='parse pcap to get stats')
    parser.add_argument('-d', '--stats-dir', action='store', required=True,
                        help='tshark stats file dir')

    args = parser.parse_args()
    files = [fn for fn in next(os.walk(args.stats_dir))[2] if
             fn.endswith('json')]
    results = {}

    for file in files:
        parts = file.split('-')
        if parts[0] == 'ryuo':
            continue
        ryuo_file = "ryuo-%s-%s" % (parts[1], parts[2])
        ryu_data, ryuo_data = None, None
        with open(os.path.join(args.stats_dir, file), 'r') as f:
            ryu_data = json.load(f)
        with open(os.path.join(args.stats_dir, ryuo_file), 'r') as f:
            ryuo_data = json.load(f)
        total_percentage = float(ryuo_data['total_tcp']) / ryu_data[
            'total_tcp'] * 100
        control_percentafe = float(ryuo_data['total_tcp']) / ryu_data[
            'flow_group_mod_tcp'] * 100
        num_nodes = int(ryu_data['num_nodes'])
        if num_nodes not in results:
            results[num_nodes] = []
        results[num_nodes].append(Result(total_percentage, control_percentafe,
                                         ryu_data['num_nodes']))

    for result_group in results:
        results[result_group] = sorted(results[result_group])

    print [[str(result) for result in result_g] for result_g in
           results.values()]

    keys = sorted(results.keys())
    pyplot.plot(keys, [results[key][0].total_percentage for key in keys],
                label='Total')
    pyplot.plot(keys, [results[key][0].control_percentage for key in keys],
                label='FG')


    # tcp_ax.set_xlabel('Num Edges')
    pyplot.xlabel('Number of Nodes')
    pyplot.ylabel('Percentage (%)')
    pyplot.ylim(ymin=0)
    pyplot.xlim(xmin=0)
    rc('font', **font)
    pyplot.legend(loc=1)

    pyplot.show()










