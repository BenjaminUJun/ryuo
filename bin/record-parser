#!/usr/bin/env python2
import argparse
import copy
from os import listdir
from os.path import isfile
from os.path import join
import json

from matplotlib import pyplot, rc
from matplotlib.pyplot import legend


font = {'family': 'normal',
        'weight': 'normal',
        'size': 22}


def is_app(app_name, file_name):
    return file_name.split('-')[1] == app_name


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='parse pcap to get stats')
    parser.add_argument('-d', '--stats-dir', action='store', required=True,
                        help='tshark stats file dir')
    parser.add_argument('-a', '--app-name', action='store', required=True,
                        help='controller application name')

    args = parser.parse_args()
    results = [f for f in listdir(args.stats_dir) if
               isfile(join(args.stats_dir, f)) and f.endswith('.json')
               and is_app(args.app_name, f)]

    # type -> app -> edge_num -> [frames]
    edges_frame = {'ryu-total': {}, 'ryuo-total': {},
                   'ryu-packet-in-out': {}, 'ryu-flow-group-mod': {}}
    # type -> app -> node_num -> [frames]
    nodes_frame = copy.deepcopy(edges_frame)
    edges_tcp = copy.deepcopy(edges_frame)
    nodes_tcp = copy.deepcopy(edges_frame)

    # tcp_fig = pyplot.figure()
    #tcp_ax = tcp_fig.add_subplot(111, projection='2d')
    handlers = [None for i in range(4)]

    for result in results:
        name_parts = result.split('.')[0].split('-')
        controller_type = name_parts[0]
        topo_name = name_parts[2]
        with open(join(args.stats_dir, result), 'r') as f:
            res = json.load(f)
            num_edges = res['num_edges']
            num_nodes = res['num_nodes']
            if controller_type == 'ryu':
                if num_edges not in edges_frame['ryu-total']:
                    edges_frame['ryu-total'][num_edges] = []
                    edges_frame['ryu-packet-in-out'][num_edges] = []
                    edges_frame['ryu-flow-group-mod'][num_edges] = []
                    edges_tcp['ryu-total'][num_edges] = []
                    edges_tcp['ryu-packet-in-out'][num_edges] = []
                    edges_tcp['ryu-flow-group-mod'][num_edges] = []
                if num_nodes not in nodes_frame['ryu-total']:
                    nodes_frame['ryu-total'][num_nodes] = []
                    nodes_frame['ryu-packet-in-out'][num_nodes] = []
                    nodes_frame['ryu-flow-group-mod'][num_nodes] = []
                    nodes_tcp['ryu-total'][num_nodes] = []
                    nodes_tcp['ryu-packet-in-out'][num_nodes] = []
                    nodes_tcp['ryu-flow-group-mod'][num_nodes] = []

                nodes_frame['ryu-total'][num_nodes].append(res['total_frame'])
                edges_frame['ryu-total'][num_edges].append(res['total_frame'])

                nodes_frame['ryu-packet-in-out'][num_nodes].append(
                    res['packet_in_out_frame'])
                edges_frame['ryu-packet-in-out'][num_edges].append(
                    res['packet_in_out_frame'])

                nodes_frame['ryu-flow-group-mod'][num_nodes].append(
                    res['flow_group_mod_frame'])
                edges_frame['ryu-flow-group-mod'][num_edges].append(
                    res['flow_group_mod_frame'])

                nodes_tcp['ryu-total'][num_nodes].append(res['total_tcp'])
                edges_tcp['ryu-total'][num_edges].append(res['total_tcp'])

                nodes_tcp['ryu-packet-in-out'][num_nodes].append(
                    res['packet_in_out_tcp'])
                edges_tcp['ryu-packet-in-out'][num_edges].append(
                    res['packet_in_out_tcp'])

                nodes_tcp['ryu-flow-group-mod'][num_nodes].append(
                    res['flow_group_mod_tcp'])
                edges_tcp['ryu-flow-group-mod'][num_edges].append(
                    res['flow_group_mod_tcp'])

                handlers[0] = pyplot.scatter(num_nodes,
                                             res[
                                                 'total_tcp'] / 1024.0 / 1024.0,
                                             c='r',
                                             marker='o',
                                             s=15)
                # handlers[1] = tcp_ax.scatter(num_edges, num_nodes,
                #                             res['packet_in_out_tcp'],
                #                             c='g', marker='^')
                handlers[2] = pyplot.scatter(num_nodes,
                                             res[
                                                 'flow_group_mod_tcp'] / 1024.0 / 1024.0,
                                             c='b', marker='*',
                                             s=15)
            else:
                if num_edges not in edges_frame['ryuo-total']:
                    edges_frame['ryuo-total'][num_edges] = []
                if num_nodes not in nodes_frame['ryuo-total']:
                    nodes_frame['ryuo-total'][num_nodes] = []
                nodes_frame['ryuo-total'][num_nodes].append(res['total_frame'])
                edges_frame['ryuo-total'][num_edges].append(res['total_tcp'])
                handlers[3] = pyplot.scatter(num_nodes,
                                             res[
                                                 'total_tcp'] / 1024.0 / 1024.0,
                                             c='c',
                                             marker='v', s=15)

    # tcp_ax.set_xlabel('Num Edges')
    pyplot.xlabel('Number of Nodes')
    pyplot.ylabel('Control Traffic'
                  ' (MB)')
    pyplot.ylim(ymin=0)
    pyplot.xlim(xmin=0)
    legend(handlers, ['Ryu Total', 'Ryu Packet In/Out',
                      'Ryu Flow/Group', 'Ryuo Total'])
    rc('font', **font)

    pyplot.show()










